extends layout

block content
  style.
    body {
      background-color: rgb(6, 26, 27);
    }

    * {
      box-sizing: border-box;
    }

    .container {
      max-width: 500px;
      margin: 60px auto;
    }

    .container h1 {
      text-align: center;
      color: white;
    }

    form {
      background-color: white;
      padding: 30px;
    }

    form .input-group {
      margin-bottom: 15px;
    }

    form label {
      display: block;
      margin-bottom: 5px;
      margin-top: 12px;
    }

    form input {
      padding: 12px 20px;
      width: 100%;
      border: 1px solid #ccc;
    }

    .submit-btn {
      width: 100%;
      border: none;
      background: rgb(37, 83, 3);
      font-size: 18px;
      color: white;
      border-radius: 3px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
    }

    #data, #progress, #downloadLink, #refreshButton, #timeEstimator {
      color: white;
      font-size: 24px;
      text-align: center;
    }

    #timeEstimator {
      font-size: 21px;
    }

    #downloadLink {
      display: none;
    }

    #finishedData {
      white-space: pre;
      text-align: left;
      font-size: 18px;
      color: white;
      margin-top: -18px;
      margin-bottom: 29px;
    }

    #refreshButton {
      cursor: pointer;
      text-decoration: underline;
      margin-top: 29px;
      display: none;
      font-size: 18px;
    }

  .container
    h1#header File Upload
    form#form
      .input-group
        label(for='file') Select (or drop) file
        input#file(type='file')
        label(for='file') Language (aka English)
        input#language(type='text' value=previousLanguage)
        label(for='file') Model (aka medium)
        input#model(type='text' value=previousModel)
      button.submit-btn(type='submit') Upload

    p#progress
    p#timeEstimator
    p#data
    p#finishedData

    a#downloadLink(href='#') Download Here

    a#refreshButton(onclick='window.location.reload();') Transcribe Something Else

  script.
    l = console.log;

    const previousModel = localStorage.getItem('model');
    const previousLanguage = localStorage.getItem('language');

    document.getElementById('model').value = previousModel;
    document.getElementById("language").value = previousLanguage;

    const ipAndPort = location.host;
    const randomNumber = Math.round(Math.random() * 1000000000000);

    // grab elements
    const form = document.getElementById("form");
    const progressDiv = document.getElementById('progress');
    const timeRemainingDiv = document.getElementById('timeEstimator');
    const header = document.getElementById('header')
    const refreshButton = document.getElementById('refreshButton');
    const latestData = document.getElementById('data');
    const file = document.getElementById("file");
    const language = document.getElementById("language").value;
    const model = document.getElementById("model").value;

    form.addEventListener("submit", submitForm);

    function submitForm(e) {
      e.preventDefault();
      const formData = new FormData();

      formData.append("file", file.files[0]);
      formData.append('language', language);
      formData.append('model', model);
      formData.append('websocketNumber', randomNumber);

      localStorage.setItem('model', model);
      localStorage.setItem('language', language);

      // Display the key/value pairs
      for (const pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
      }
      const fileName = document.getElementById('file').files[0].name;
      l(`filename: ${fileName}`)

      const uploadUrl = `http://${ipAndPort}/file`;

      var ajax = new XMLHttpRequest();
      let originalDate, uploadStarted, timeElapsedInSeconds, estimatedUploadTimeInSeconds, estimatedSecondsRemaining;

      ajax.upload.addEventListener("progress", function(event){
        l(event);
        form.style.display = 'none';

        var percent = Math.round((event.loaded / event.total) * 100);
        progressDiv.innerHTML = `${percent}% uploaded`;

        const currentTime = new Date();
        timeElapsedInSeconds = Math.round((currentTime - originalDate) / 1000);
        estimatedUploadTimeInSeconds = Math.round(timeElapsedInSeconds * (100/percent));
        estimatedSecondsRemaining = estimatedUploadTimeInSeconds - timeElapsedInSeconds;

        // start up functionality to update estimate every second
        if(!uploadStarted){
          uploadStarted = true;
          originalDate = new Date();
          setInterval(function(){
            // TODO: not honoring newlines
            timeRemainingDiv.innerHTML = `[${timeElapsedInSeconds}/${estimatedUploadTimeInSeconds}s] ${estimatedSecondsRemaining} seconds remaining`
          }, 1000)
        }
      }, false);

      ajax.addEventListener("load", function(res){
          console.log(res)
        progressDiv.style.display = 'none';
        timeRemainingDiv.style.display = 'none';

        header.innerHTML = 'Processing..';

      }, false);
      // TODO: implement these
      // ajax.addEventListener("error", errorHandler, false);
      // ajax.addEventListener("abort", abortHandler, false);
      ajax.open("POST", uploadUrl); //
      ajax.send(formData);
    }

    (function () {
      const ws = new WebSocket(`ws://${ipAndPort}/${randomNumber}`);

      ws.onmessage = function (event) {
        const data = JSON.parse(event.data);

        console.log(event.data);

        latestData.innerHTML = data;

        if (data.status === 'Completed') {
          latestData.innerHTML = 'Congratulations, you\'re done!';

          document.getElementById('finishedData').innerHTML = data.detailsString;

          const downloadLink = document.getElementById('downloadLink')
          downloadLink.href = data.url;
          downloadLink.style.display = 'block';
          header.innerHTML = 'Transcription Completed';
          refreshButton.style.display = 'block';

          l(data.url)
        }
      };
    })();

    /** DRAG AND DROP FILES **/
    file.ondragover = file.ondragenter = function (evt) {
      evt.preventDefault();
    };

    file.ondrop = function (evt) {
      evt.preventDefault();

      let list = new DataTransfer();
      let firstPassedFile = evt.dataTransfer.files[0];
      list.items.add(firstPassedFile);

      if(evt?.dataTransfer?.files){
        l('running here');
        // only add the first file
        file.files = list.files;
        l(list.files);
        l(file.files);

      } else {
        l('no files found');
      }
    };
