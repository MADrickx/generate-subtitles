extends layout

block content
  style.
    body {
      background-color: rgb(6, 26, 27);
    }

    * {
      box-sizing: border-box;
    }

    .container {
      max-width: 500px;
      margin: 60px auto;
    }

    .container h1 {
      text-align: center;
      color: white;
    }

    form {
      background-color: white;
      padding: 30px;
    }

    form .input-group {
      margin-bottom: 15px;
    }

    form label {
      display: block;
      margin-bottom: 5px;
      margin-top: 12px;
    }

    form input {
      padding: 12px 20px;
      width: 100%;
      border: 1px solid #ccc;
    }

    .submit-btn {
      width: 100%;
      border: none;
      background: rgb(37, 83, 3);
      font-size: 18px;
      color: white;
      border-radius: 3px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
    }

    #data, #progress, #downloadLink, #refreshButton, #timeEstimator, #startNewUpload {
      color: white;
      font-size: 24px;
      text-align: center;
    }

    #timeEstimator {
      font-size: 21px;
    }

    #downloadLink {
      display: none;
    }

    #finishedData {
      white-space: pre;
      text-align: left;
      font-size: 18px;
      color: white;
      margin-top: -18px;
      margin-bottom: 29px;
    }

    #refreshButton, #startNewUpload {
      cursor: pointer;
      text-decoration: underline;
      margin-top: 29px;
      display: none;
      font-size: 18px;
    }

    #startNewUpload {
      margin-top: 45px;
    }

  .container
    h1#header File Upload
    form#form
      .input-group
        label(for='file') Select (or drop) file
        input#file(type='file')
        label(for='file') Language (aka English)
        input#language(type='text' value=previousLanguage)
        label(for='file') Model (aka medium)
        input#model(type='text' value=previousModel)
      button.submit-btn(type='submit') Upload

    p#progress
    p#timeEstimator
    p#data
    p#finishedData

    // kind of duplicated, not sure it's needed
    a#startNewUpload(onclick='(function(){ window.open(window.location.href, \'_blank\').focus(); })();') Start Another Transcription

    a#downloadLink(href='#') Download Here

    a#refreshButton(onclick='(function(){ window.open(window.location.href, \'_blank\').focus(); })();') Start New Transcription

  script(src='//cdn.jsdelivr.net/npm/sweetalert2@11')
  script.
    l = console.log;

    function unescapeHTML(escapedHTML) {
      return escapedHTML.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    }

    // had to do this because of the greater than thing (remove backslash)
    // otherwise could do const forHumans = #/{forHumans}
    eval(unescapeHTML(`#{forHumans}`));

    l(forHumans(100));

    // TODO: pass from frontend
    const languagesString = 'Afrikaans,Albanian,Amharic,Arabic,Armenian,Assamese,Azerbaijani,Bashkir,Basque,Belarusian,Bengali,Bosnian,Breton,Bulgarian,Burmese,Castilian,Catalan,Chinese,Croatian,Czech,Danish,Dutch,English,Estonian,Faroese,Finnish,Flemish,French,Galician,Georgian,German,Greek,Gujarati,Haitian,Haitian Creole,Hausa,Hawaiian,Hebrew,Hindi,Hungarian,Icelandic,Indonesian,Italian,Japanese,Javanese,Kannada,Kazakh,Khmer,Korean,Lao,Latin,Latvian,Letzeburgesch,Lingala,Lithuanian,Luxembourgish,Macedonian,Malagasy,Malay,Malayalam,Maltese,Maori,Marathi,Moldavian,Moldovan,Mongolian,Myanmar,Nepali,Norwegian,Nynorsk,Occitan,Panjabi,Pashto,Persian,Polish,Portuguese,Punjabi,Pushto,Romanian,Russian,Sanskrit,Serbian,Shona,Sindhi,Sinhala,Sinhalese,Slovak,Slovenian,Somali,Spanish,Sundanese,Swahili,Swedish,Tagalog,Tajik,Tamil,Tatar,Telugu,Thai,Tibetan,Turkish,Turkmen,Ukrainian,Urdu,Uzbek,Valencian,Vietnamese,Welsh,Yiddish,Yoruba';
    const languages = languagesString.split(',');
    const modelsString = 'tiny.en,tiny,base.en,base,small.en,small,medium.en,medium,large';
    const models = modelsString.split(',');


    const previousModel = localStorage.getItem('model');
    const previousLanguage = localStorage.getItem('language');

    document.getElementById('model').value = previousModel;
    document.getElementById("language").value = previousLanguage;

    const ipAndPort = location.host;
    const randomNumber = Math.round(Math.random() * 1000000000000);

    // grab elements
    const form = document.getElementById("form");
    const progressDiv = document.getElementById('progress');
    const timeRemainingDiv = document.getElementById('timeEstimator');
    const header = document.getElementById('header')
    const refreshButton = document.getElementById('refreshButton');
    const latestData = document.getElementById('data');
    const file = document.getElementById("file");
    const language = document.getElementById("language").value;
    const model = document.getElementById("model").value;

    form.addEventListener("submit", submitForm);

    let uploadStarted = false;

    function submitForm(e) {
      e.preventDefault();

      const language = document.getElementById("language").value;
      const model = document.getElementById("model").value;

      const formData = new FormData();

      const passedFile = file.files[0]

      if(!passedFile){
        return Swal.fire({
          title: 'You didn\'t pass a file',
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      function capitalize(s) {
        return s[0].toUpperCase() + s.slice(1);
      }

      const existsAndNotValidLanguage =
        language &&
        !languages.includes(language) &&
        !languages.includes(capitalize(language));

      if(existsAndNotValidLanguage){
        return Swal.fire({
          title: 'Can only use one of the following languages',
          text: languages,
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      const modelExistsAndNotValid = model && !models.includes(model);

      if (modelExistsAndNotValid) {
        return Swal.fire({
          title: 'Can only use one of the following models',
          text: models,
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      formData.append("file", passedFile);
      formData.append('language', language);
      formData.append('model', model);
      formData.append('websocketNumber', randomNumber);

      localStorage.setItem('model', model);
      localStorage.setItem('language', language);

      // Display the key/value pairs
      for (const pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
      }
      const fileName = document.getElementById('file').files[0].name;
      l(`filename: ${fileName}`)

      const uploadUrl = `http://${ipAndPort}/file`;

      var ajax = new XMLHttpRequest();
      let originalDate, timeElapsedInSeconds, estimatedUploadTimeInSeconds, estimatedSecondsRemaining;

      ajax.upload.addEventListener("progress", function(event){
        l(event);
        form.style.display = 'none';
        document.getElementById('startNewUpload').style.display = 'block';

        var percent = Math.round((event.loaded / event.total) * 100);
        progressDiv.innerHTML = `${percent}% uploaded`;

        const currentTime = new Date();
        timeElapsedInSeconds = Math.round((currentTime - originalDate) / 1000);
        estimatedUploadTimeInSeconds = Math.round(timeElapsedInSeconds * (100/percent));
        estimatedSecondsRemaining = estimatedUploadTimeInSeconds - timeElapsedInSeconds;

        // start up functionality to update estimate every second
        if(!uploadStarted){
          uploadStarted = true;
          originalDate = new Date();
          setInterval(function(){
            // TODO: not honoring newlines
            timeRemainingDiv.innerHTML = `[${timeElapsedInSeconds}/${estimatedUploadTimeInSeconds}s] ${forHumans(estimatedSecondsRemaining)} remaining`
          }, 1000)
        }
      }, false);

      ajax.addEventListener("load", function(res){
          console.log(res)
        progressDiv.style.display = 'none';
        timeRemainingDiv.style.display = 'none';

        header.innerHTML = 'Processing..';

        document.getElementById('startNewUpload').style.marginTop = '29px';

      }, false);
      // TODO: implement these
      // ajax.addEventListener("error", errorHandler, false);
      // ajax.addEventListener("abort", abortHandler, false);
      ajax.open("POST", uploadUrl); //
      ajax.send(formData);
    }

    let placeInQueue = 0;

    (function () {
      const websocketConnection = new WebSocket(`ws://${ipAndPort}/${randomNumber}`);

      websocketConnection.onmessage = function (event) {
        const data = JSON.parse(event.data);

        console.log(event.data);

        if (data.status === 'Completed') {
          latestData.innerHTML = 'Congratulations, you\'re done!';

          document.getElementById('finishedData').innerHTML = data.detailsString;

          const downloadLink = document.getElementById('downloadLink')
          downloadLink.href = data.url;
          downloadLink.style.display = 'block';
          header.innerHTML = 'Transcription Completed';
          refreshButton.style.display = 'block';

          l(data.url)

          document.getElementById('startNewUpload').style.display = 'none';
          websocketConnection.close()
        } else if (data.message === 'queue'){
          placeInQueue = data.placeInQueue;
          placeInQueue = placeInQueue + 1;
          latestData.innerHTML = `Your place in the queue is ${placeInQueue}. You'll start when others are done`;
        } else if(data === 'finishedProcessing' && uploadStarted){
          placeInQueue = placeInQueue - 1;
          latestData.innerHTML = `Your place in the queue is ${placeInQueue}. You'll start when others are done`;
        } else if (data.message === 'fileDetails') {
          document.getElementById('finishedData').innerHTML = data.fileDetails;
        } else {
          latestData.innerHTML = data;
        }
      };
    })();

    /** DRAG AND DROP FILES **/
    file.ondragover = file.ondragenter = function (evt) {
      evt.preventDefault();
    };

    file.ondrop = function (evt) {
      evt.preventDefault();

      // only add the first file
      let list = new DataTransfer();
      let firstPassedFile = evt.dataTransfer.files[0];
      list.items.add(firstPassedFile);

      if(evt?.dataTransfer?.files){
        file.files = list.files;

      } else {
        l('no files found');
      }
    };



